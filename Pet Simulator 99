-- Załaduj Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Utwórz GUI
local Window = Rayfield:CreateWindow({
    Name = "Pet Simulator 99 Script",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "by Dark",
    ConfigurationSaving = {
       Enabled = false,
       FolderName = RayfieldGUIconfig,
       FileName = "Pet Simulator 99"
    },
    Discord = {
       Enabled = false,
       Invite = "",
       RememberJoins = true
    },
    KeySystem = false
})

-- Tworzymy zakładkę
local MainTab = Window:CreateTab("Auto Fuse", 4483362458)
local OtherTab = Window:CreateTab("Other", 4483362458)
local GardenTab = Window:CreateTab("Garden", 4483362458)
local MinigamesTab = Window:CreateTab("Minigames", 4483362458)

local function Wait(x)
    local startTick = tick()  -- Czas rzeczywisty
    local startClock = os.clock()  -- Czas CPU

    for i = 1, x do
        task.wait()
    end

    local logTime = false  -- Ustaw true, by włączyć logowanie

    if logTime then
        local totalTick = tick() - startTick
        local totalClock = os.clock() - startClock
        print("Wait(" .. x .. ") trwało około " .. totalTick .. " sekund (czas rzeczywisty).")
        print("Czas używanego CPU: " .. totalClock .. " sekund.")
    end
end

-- Utwórz czarną nakładkę (raz, na start)
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "RenderToggleGui"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local background = Instance.new("Frame")
background.Size = UDim2.new(1, 0, 1, 0)
background.Position = UDim2.new(0, 0, 0, 0)
background.BackgroundColor3 = Color3.new(0, 0, 0)
background.ZIndex = 10
background.Visible = false
background.Parent = screenGui

-- Funkcja ustawiająca render + nakładkę
local function setRendering(state)
    game:GetService("RunService"):Set3dRenderingEnabled(state)
    background.Visible = not state
end

-- Rayfield Toggle
OtherTab:CreateToggle({
    Name = "No Rendering",
    CurrentValue = false,
    Callback = function(Value)
        setRendering(not Value)
    end,
})

local function toggleDiamondsGui(Value)
    if Value then
        -- Tworzymy GUI
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "DiamondsGui"
        screenGui.ResetOnSpawn = false
        screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

        -- Frame
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 200, 0, 100)
        frame.Position = UDim2.new(0.5, -100, 0.1, 0)
        frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        frame.Active = true
        frame.Draggable = true
        frame.Parent = screenGui

        -- Zaokrąglone rogi
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 10)
        corner.Parent = frame

        -- Label
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0.8, 0)
        label.Position = UDim2.new(0, 0, 0, 0)
        label.BackgroundTransparency = 1
        label.TextColor3 = Color3.new(1, 1, 1)
        label.TextScaled = true
        label.Font = Enum.Font.GothamBold
        label.Text = "Diamonds: ..."
        label.Parent = frame

        -- Obsługuje zmiany wartości diamentów
        local function formatNumber(n)
            local formatted = tostring(n)
            while true do
                formatted, k = formatted:gsub("^(-?%d+)(%d%d%d)", "%1.%2")
                if k == 0 then break end
            end
            return formatted
        end

        -- Track diamentów
        local player = game.Players.LocalPlayer
        local leaderstats = player:WaitForChild("leaderstats")
        local diamonds = leaderstats:FindFirstChild("💎 Diamonds") or leaderstats:FindFirstChild("\240\159\146\142 Diamonds")

        if diamonds and diamonds:IsA("IntValue") then
            local startTime = tick()
            local startValue = diamonds.Value

            diamonds:GetPropertyChangedSignal("Value"):Connect(function()
                local currentValue = diamonds.Value
                local now = tick()
                local minutes = (now - startTime) / 60
                local gain = currentValue - startValue
                local perMinute = math.floor(gain / minutes + 0.5)

                label.Text = "Diamonds: " .. formatNumber(currentValue) ..
                    "\nChange: " .. (perMinute >= 0 and "+" or "") .. formatNumber(perMinute) .. " / min"
            end)
        else
            label.Text = "Diamonds not found"
        end
    else
        -- Jeśli chcemy wyłączyć tracker, usuwamy GUI
        local existingGui = game.Players.LocalPlayer:FindFirstChild("PlayerGui"):FindFirstChild("DiamondsGui")
        if existingGui then
            existingGui:Destroy()
        end
    end
end

OtherTab:CreateToggle({
    Name = "Diamonds Tracker",
    CurrentValue = false,
    Callback = function(Value)
        toggleDiamondsGui(Value)
    end,
})

-- Zmienna sterująca cyklem ogrodu
local gardenCycleEnabled = false

-- Funkcja do cyklu sadzenia, przyspieszania wzrostu i zbierania
local function gardenCycle()
    while gardenCycleEnabled do
        -- Zasadź nowe rośliny równocześnie
        for i = 1, 10 do
            task.spawn(function()
                local args2 = {
                    [1] = "FlowerGarden",
                    [2] = "PlantSeed",
                    [3] = i,
                    [4] = "Diamond"
                }
                game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer(unpack(args2))
            end)
            Wait(2)  -- Krótkie opóźnienie między uruchomieniami
        end

        -- Przyspiesz wzrost roślin równocześnie
        for i = 1, 10 do
            task.spawn(function()
                local args3 = {
                    [1] = "FlowerGarden",
                    [2] = "InstaGrowSeed",
                    [3] = i
                }
                game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer(unpack(args3))
            end)
            Wait(2)
        end

        -- Odebranie nagrody po przyspieszeniu wzrostu równocześnie
        for i = 1, 10 do
            task.spawn(function()
                local args1 = {
                    [1] = "FlowerGarden",
                    [2] = "ClaimPlant",
                    [3] = i
                }
                game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args1))
            end)
            Wait(2)
        end
    end
end

-- Tworzymy Toggle do uruchamiania cyklu ogrodu
local GardenCycleToggle = GardenTab:CreateToggle({
    Name = "Enable Garden Farming",
    CurrentValue = false,
    Flag = "GardenCycleToggle",
    Callback = function(Value)
        gardenCycleEnabled = Value
        if gardenCycleEnabled then
            -- Odbierz nagrodę z rośliny (jednorazowo na początku)
            for i = 1, 10 do
                local args1 = {
                    [1] = "FlowerGarden",
                    [2] = "ClaimPlant",
                    [3] = i
                }
                game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args1))
                task.wait()  -- Krótkie oczekiwanie, aby akcje były stabilne
            end

            -- Rozpoczynamy cykl ogrodu
            gardenCycle()  -- Funkcja teraz sadzi rośliny równocześnie
        end
    end
})

local SeedBagEnabled = false

local SeedBagToggle = GardenTab:CreateToggle({
    Name = "Open Seed Bag",
    CurrentValue = false,
    Flag = "SeedBagToggle",
    Callback = function(Value)
        SeedBagEnabled = Value

        local miscItemName = "Seed Bag"

        -- Otwieranie przy użyciu Lib lub fallback bez Lib
        task.spawn(function()
            while SeedBagEnabled do
                local Lib = getgenv().hgLib  -- Sprawdzanie dostępności `Lib` w każdej iteracji
                if Lib then
                    -- Funkcja do pobrania przedmiotu z Misc
                    local function getMiscItem(id)
                        for index, item in pairs(Lib.Save.Get().Inventory.Misc or {}) do
                            if item.id == id then
                                return index, item
                            end
                        end
                        return nil
                    end

                    -- Sprawdzanie przedmiotu i otwieranie paczki
                    local index, item = getMiscItem(miscItemName)
                    if index and item then
                        game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(miscItemName)
                        Wait(9)
                    else
                        break
                    end
                else
                    -- Otwieranie paczek bez Lib (fallback)
                    game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(miscItemName)
                    Wait(9)
                end
            end
        end)
    end
})

local FishingButton = 
MinigamesTab:CreateButton({
    Name = "Fishing GUI",
    Callback = function()
        local player = game.Players.LocalPlayer
        local gui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
        gui.Name = "FishingGui"
        gui.ResetOnSpawn = false

        local frame = Instance.new("Frame", gui)
        frame.Size = UDim2.new(0, 200, 0, 125)
        frame.Position = UDim2.new(0, 100, 0, 100)
        frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        frame.Active = true
        frame.Draggable = true
        frame.Name = "MainFrame"

        Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 10)

        local function Wait(x)
            for i = 1, x do
                task.wait()
            end
        end

        local castBtn = Instance.new("TextButton", frame)
        castBtn.Size = UDim2.new(0, 120, 0, 40)
        castBtn.Position = UDim2.new(0, 10, 0, 10)
        castBtn.Text = "Cast OFF"
        castBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        Instance.new("UICorner", castBtn).CornerRadius = UDim.new(0, 8)

        local toggleBtn = Instance.new("TextButton", frame)
        toggleBtn.Size = UDim2.new(0, 120, 0, 40)
        toggleBtn.Position = UDim2.new(0, 10, 0, 60)
        toggleBtn.Text = "OFF"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        Instance.new("UICorner", toggleBtn).CornerRadius = UDim.new(0, 8)

        local closeBtn = Instance.new("TextButton", frame)
        closeBtn.Size = UDim2.new(0, 30, 0, 30)
        closeBtn.Position = UDim2.new(1, -40, 0, 5)
        closeBtn.Text = "X"
        closeBtn.TextColor3 = Color3.new(1, 1, 1)
        closeBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0, 8)

        local toggleMoveBtn = Instance.new("TextButton", gui)
        toggleMoveBtn.Size = UDim2.new(0, 100, 0, 40)
        toggleMoveBtn.Position = UDim2.new(0, 10, 0, 150)
        toggleMoveBtn.Text = "GUI"
        toggleMoveBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        toggleMoveBtn.TextColor3 = Color3.new(1, 1, 1)
        toggleMoveBtn.Active = true
        toggleMoveBtn.Draggable = true
        Instance.new("UICorner", toggleMoveBtn).CornerRadius = UDim.new(0, 8)

        local running = false
        local casting = false
        local loopThread
        local castThread

        local function castFishingLine()
            local character = player.Character or player.CharacterAdded:Wait()
            local hrp = character:WaitForChild("HumanoidRootPart")

            local minX, maxX = 1463.4725, 1489.3961
            local minY, maxY = 61.6249, 61.6251
            local minZ, maxZ = -4460.5239, -4441.8594

            local target = Vector3.new(
                math.random() * (maxX - minX) + minX,
                math.random() * (maxY - minY) + minY,
                math.random() * (maxZ - minZ) + minZ
            )

            local success, err = pcall(function()
                game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer("AdvancedFishing", "RequestCast", target)
            end)

            if not success then
                warn("Cast error: " .. tostring(err))
            end
        end

        local function startFishingLoop()
            loopThread = task.spawn(function()
                while running do
                    local success, err = pcall(function()
                        game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer("AdvancedFishing", "Clicked")
                        game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer("AdvancedFishing", "RequestReel")
                    end)
                    if not success then
                        warn("Fishing error: " .. tostring(err))
                    end
                    Wait(4)
                end
            end)
        end

        castBtn.MouseButton1Click:Connect(function()
            casting = not casting
            if casting then
                castBtn.Text = "Cast ON"
                castBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
                castThread = task.spawn(function()
                    while casting do
                        castFishingLine()
                        task.wait(1)
                    end
                end)
            else
                castBtn.Text = "Cast OFF"
                castBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
            end
        end)

        toggleBtn.MouseButton1Click:Connect(function()
            running = not running
            if running then
                toggleBtn.Text = "tapping ON"
                toggleBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
                startFishingLoop()
            else
                toggleBtn.Text = "tapping OFF"
                toggleBtn.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            end
        end)

        closeBtn.MouseButton1Click:Connect(function()
            running = false
            casting = false
            gui:Destroy()
        end)

        local guiVisible = true
        toggleMoveBtn.MouseButton1Click:Connect(function()
            guiVisible = not guiVisible
            frame.Visible = guiVisible
            toggleMoveBtn.Text = guiVisible and "Hide GUI" or "Show GUI"
        end)
    end
})

local toggleEnabled = false

local Toggle = MainTab:CreateToggle({
    Name = "Auto Pet Surge Ultimate",
    CurrentValue = false,
    Callback = function(Value)
        toggleEnabled = Value

        task.spawn(function()
            while toggleEnabled do
                local args = {
                    [1] = "Pet Surge"
                }
                game:GetService("ReplicatedStorage").Network:FindFirstChild("Ultimates: Activate"):InvokeServer(unpack(args))
                task.wait(7)
            end
        end)
    end,
})

local Toggle = MainTab:CreateToggle({
    Name = "Auto Daycare",
    CurrentValue = false,
    Flag = "AutoDaycare",
    Callback = function(Value)
        getgenv().AutoDaycare = Value
        task.spawn(function()
            while getgenv().AutoDaycare do
                pcall(function()
                    game:GetService("ReplicatedStorage").Network:FindFirstChild("Daycare: Claim"):InvokeServer()
                    task.wait(1)
                    local args = {
                        [1] = {
                            ["e7bedab3bb7240d3827ac20380c9850b"] = 55
                        }
                    }
                    game:GetService("ReplicatedStorage").Network:FindFirstChild("Daycare: Enroll"):InvokeServer(unpack(args))
                end)
                task.wait(30) -- przerwa między cyklami, możesz zmienić
            end
        end)
    end,
})

-- Zmienna sterująca Auto Fuse
local autoFuseEnabled = false
local autoFuseRunning = false  -- Zmienna kontrolująca stan pętli

-- Przełącznik Auto Fuse
local FuseToggle = MainTab:CreateToggle({
    Name = "Włącz Auto Fuse",
    CurrentValue = false,
    Flag = "AutoFuseToggle",
    Callback = function(Value)
        autoFuseEnabled = Value
        if autoFuseEnabled then
            autoFuseRunning = true  -- Rozpocznij pętlę
        else
            autoFuseRunning = false  -- Zatrzymaj pętlę
        end
    end
})

-- Załaduj dane z URL
local success, petData = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/DarkSwarm123/Pet-Simulator-99/refs/heads/main/FUSINGDIR.lua"))()
end)

-- Sprawdź, czy dane zostały poprawnie załadowane
if success and petData then
    print("Dane załadowane poprawnie!")
else
    warn("Błąd ładowania danych o petach!")
end

-- Funkcja Auto Fuse
task.spawn(function()
    while true do
        if autoFuseRunning then
            if petData then
                -- Iterujemy po danych petów
                for _, petSet in ipairs(petData) do
                    local args = {}

                    -- Przygotowanie argumentów dla FuseMachine_Activate
                    for petId, quantity in pairs(petSet) do
                        table.insert(args, { [petId] = quantity })
                    end

                    -- Wywołanie FuseMachine_Activate z odpowiednimi petami
                    local successFuse, errorMessage = pcall(function()
                        game:GetService("ReplicatedStorage").Network.FuseMachine_Activate:InvokeServer(unpack(args))
                    end)

                    if successFuse then
                        print("Pomyślnie wysłano fuzję dla:", args)
                    else
                        warn("Błąd przy wysyłaniu fuzji:", errorMessage)
                    end

                    Wait(7)  -- Czas oczekiwania dla stabilności
                end
            else
                warn("loadstringArgs nie zostało załadowane poprawnie.")
            end
        end
        task.wait(0.1)  -- Czekaj przed ponownym sprawdzeniem
    end
end)

-- Przycisk uruchamiający RemoteSpy (dla mobilnych urządzeń)
local RemoteSpyButton = OtherTab:CreateButton({
    Name = "RemoteSpy (For Mobile)",
    Callback = function()
        loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Simple-Spy-32021"))()
    end
})

