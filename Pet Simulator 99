-- Załaduj Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Utwórz GUI
local Window = Rayfield:CreateWindow({
    Name = "Pet Simulator 99 Script",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "by Dark",
    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil,
       FileName = "Pet Simulator 99"
    },
    Discord = {
       Enabled = false,
       Invite = "",
       RememberJoins = true
    },
    KeySystem = false
})

-- Tworzymy zakładkę
local AutoFuseTab = Window:CreateTab("Auto Fuse", 4483362458)
local OtherTab = Window:CreateTab("Other", 4483362458)
local GardenTab = Window:CreateTab("Garden", 4483362458)

-- Tworzymy sekcję
local SettingsSection = AutoFuseTab:CreateSection("Ustawienia")

local function Wait(x)
    local startTick = tick()  -- Czas rzeczywisty
    local startClock = os.clock()  -- Czas CPU

    for i = 1, x do
        task.wait()
    end

    local logTime = false  -- Ustaw true, by włączyć logowanie

    if logTime then
        local totalTick = tick() - startTick
        local totalClock = os.clock() - startClock
        print("Wait(" .. x .. ") trwało około " .. totalTick .. " sekund (czas rzeczywisty).")
        print("Czas używanego CPU: " .. totalClock .. " sekund.")
    end
end

-- Zmienna sterująca cyklem ogrodu
local gardenCycleEnabled = false

-- Funkcja do cyklu sadzenia, przyspieszania wzrostu i zbierania
local function gardenCycle()
    while gardenCycleEnabled do
        -- Zasadź nowe rośliny równocześnie
        for i = 1, 10 do
            task.spawn(function()
                local args2 = {
                    [1] = "FlowerGarden",
                    [2] = "PlantSeed",
                    [3] = i,
                    [4] = "Diamond"
                }
                game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer(unpack(args2))
            end)
            Wait(2)  -- Krótkie opóźnienie między uruchomieniami
        end

        -- Przyspiesz wzrost roślin równocześnie
        for i = 1, 10 do
            task.spawn(function()
                local args3 = {
                    [1] = "FlowerGarden",
                    [2] = "InstaGrowSeed",
                    [3] = i
                }
                game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer(unpack(args3))
            end)
            Wait(2)
        end

        -- Odebranie nagrody po przyspieszeniu wzrostu równocześnie
        for i = 1, 10 do
            task.spawn(function()
                local args1 = {
                    [1] = "FlowerGarden",
                    [2] = "ClaimPlant",
                    [3] = i
                }
                game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args1))
            end)
            Wait(2)
        end
    end
end

-- Tworzymy Toggle do uruchamiania cyklu ogrodu
local GardenCycleToggle = GardenTab:CreateToggle({
    Name = "Enable garden cycle (Plant + Grow + Claim)",
    CurrentValue = false,
    Flag = "GardenCycleToggle",
    Callback = function(Value)
        gardenCycleEnabled = Value
        if gardenCycleEnabled then
            -- Odbierz nagrodę z rośliny (jednorazowo na początku)
            for i = 1, 10 do
                local args1 = {
                    [1] = "FlowerGarden",
                    [2] = "ClaimPlant",
                    [3] = i
                }
                game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args1))
                task.wait()  -- Krótkie oczekiwanie, aby akcje były stabilne
            end

            -- Rozpoczynamy cykl ogrodu
            gardenCycle()  -- Funkcja teraz sadzi rośliny równocześnie
        end
    end
})

local SeedBagEnabled = false

local SeedBagToggle = GardenTab:CreateToggle({
    Name = "Open Seed Bag",
    CurrentValue = false,
    Flag = "SeedBagToggle",
    Callback = function(Value)
        SeedBagEnabled = Value
        -- Sprawdzamy, czy przełącznik jest włączony
        if SeedBagEnabled then
            -- Rozpoczynamy pętlę otwierania paczek w nowym wątku
            task.spawn(function()
                while SeedBagEnabled do
                    local args = {
                        [1] = "Seed Bag"
                    }
                    -- Otwórz paczkę
                    game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(unpack(args))
                    Wait(2)  -- Małe opóźnienie dla stabilności
                end
            end)
        end
    end
})

-- Zmienna sterująca Auto Fuse
local autoFuseEnabled = false
local autoFuseRunning = false  -- Zmienna kontrolująca stan pętli

-- Przełącznik Auto Fuse
local FuseToggle = AutoFuseTab:CreateToggle({
    Name = "Włącz Auto Fuse",
    CurrentValue = false,
    Flag = "AutoFuseToggle",
    Callback = function(Value)
        autoFuseEnabled = Value
        if autoFuseEnabled then
            autoFuseRunning = true  -- Rozpocznij pętlę
        else
            autoFuseRunning = false  -- Zatrzymaj pętlę
        end
    end
})

-- Załaduj dane z URL
local success, petData = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/DarkSwarm123/Pet-Simulator-99/refs/heads/main/FUSINGDIR.lua"))()
end)

-- Sprawdź, czy dane zostały poprawnie załadowane
if success and petData then
    print("Dane załadowane poprawnie!")
else
    warn("Błąd ładowania danych o petach!")
end

-- Funkcja Auto Fuse
task.spawn(function()
    while true do
        if autoFuseRunning then
            if petData then
                -- Iterujemy po danych petów
                for _, petSet in ipairs(petData) do
                    local args = {}

                    -- Przygotowanie argumentów dla FuseMachine_Activate
                    for petId, quantity in pairs(petSet) do
                        table.insert(args, { [petId] = quantity })
                    end

                    -- Wywołanie FuseMachine_Activate z odpowiednimi petami
                    local successFuse, errorMessage = pcall(function()
                        game:GetService("ReplicatedStorage").Network.FuseMachine_Activate:InvokeServer(unpack(args))
                    end)

                    if successFuse then
                        print("Pomyślnie wysłano fuzję dla:", args)
                    else
                        warn("Błąd przy wysyłaniu fuzji:", errorMessage)
                    end

                    Wait(7)  -- Czas oczekiwania dla stabilności
                end
            else
                warn("loadstringArgs nie zostało załadowane poprawnie.")
            end
        end
        task.wait(0.1)  -- Czekaj przed ponownym sprawdzeniem
    end
end)

-- Funkcja do używania zabawek
local function UseToys() 
    game:GetService("ReplicatedStorage").Network.SqueakyToy_Consume:InvokeServer()

    for i = 1, 2 do
        game:GetService("ReplicatedStorage").Network.ToyBall_Consume:InvokeServer()   
        game:GetService("ReplicatedStorage").Network.ToyBone_Consume:InvokeServer()
    end
end

-- Przycisk uruchamiający RemoteSpy (dla mobilnych urządzeń)
local RemoteSpyButton = OtherTab:CreateButton({
    Name = "RemoteSpy (For Mobile)",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/realredz/SimpleSpy/refs/heads/main/Mobile.lua"))()
    end
})

-- Przycisk uruchamiający używanie zabawek
local UseToysButton = OtherTab:CreateButton({
    Name = "Use Toys",
    Callback = function()
        UseToys()
    end
})
